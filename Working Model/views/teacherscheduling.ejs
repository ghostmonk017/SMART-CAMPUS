<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Class Schedule</title>
    <link rel="stylesheet" href="schedule.css">
    <style>
        body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 20px;
}

.container {
    max-width: 1200px;
    margin: auto;
    padding: 20px;
    background: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
}

h1 {
    text-align: center;
    color: #333;
}

form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 20px;
}

.form-group {
    display: flex;
    flex-direction: column;
}

label {
    margin-bottom: 5px;
    font-weight: bold;
}

input {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

input:focus {
    border-color: #007bff;
    outline: none;
}

.submit-button {
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.submit-button:hover {
    background-color: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

th, td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
}

th {
    background-color: #007bff;
    color: white;
}

tr:nth-child(even) {
    background-color: #f2f2f2;
}

.delete-button {
    padding: 5px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.delete-button:hover {
    background-color: #c82333;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .container {
        padding: 15px;
    }

    form {
        flex-direction: column;
    }

    .form-group {
        flex-direction: column;
    }

    input {
        width: 100%;
    }

    .submit-button, .delete-button {
        width: 100%;
    }

    table {
        font-size: 14px;
    }
}

    </style>
</head>
<body>
    <div class="container">
        <h1>Teacher Class Schedule</h1>
        <form id="scheduleForm">
            <div class="form-group">
                <label for="day">Day:</label>
                <input type="text" id="day" required placeholder="Enter Day (e.g., Monday)">
            </div>
            <div class="form-group">
                <label for="time">Time:</label>
                <input type="text" id="time" required placeholder="Enter Time (e.g., 10:00 AM)">
            </div>
            <div class="form-group">
                <label for="subject">Subject:</label>
                <input type="text" id="subject" required placeholder="Enter Subject">
            </div>
            <div class="form-group">
                <label for="teacher">Teacher:</label>
                <input type="text" id="teacher" required placeholder="Enter Teacher Name">
            </div>
            <button type="submit" class="submit-button">Add/Update Class</button>
        </form>
        <table>
            <thead>
                <tr>
                    <th>Day</th>
                    <th>Time</th>
                    <th>Subject</th>
                    <th>Teacher</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="teacherScheduleTableBody">
                <!-- Schedule will be populated here -->
            </tbody>
        </table>
    </div>
    <script >
        document.getElementById('scheduleForm').addEventListener('submit', (e) => {
    e.preventDefault();

    const day = document.getElementById('day').value;
    const time = document.getElementById('time').value;
    const subject = document.getElementById('subject').value;
    const teacher = document.getElementById('teacher').value;

    const scheduleRecord = { day, time, subject, teacher };
    
    // Store or update schedule in localStorage
    updateClassSchedule(scheduleRecord);

    // Clear the form
    document.getElementById('scheduleForm').reset();
    populateTeacherSchedule();
});

// Update class schedule in localStorage
function updateClassSchedule(record) {
    let schedule = JSON.parse(localStorage.getItem('classSchedule')) || [];
    
    // Check if the record already exists (based on day and time)
    const existingRecordIndex = schedule.findIndex(item => item.day === record.day && item.time === record.time);

    if (existingRecordIndex > -1) {
        // Update existing record
        schedule[existingRecordIndex] = record;
    } else {
        // Add new record
        schedule.push(record);
    }

    localStorage.setItem('classSchedule', JSON.stringify(schedule));
}

// Populate class schedule for teachers
function populateTeacherSchedule() {
    const schedule = JSON.parse(localStorage.getItem('classSchedule')) || [];
    const tbody = document.getElementById('teacherScheduleTableBody');

    tbody.innerHTML = ''; // Clear previous data

    if (schedule.length === 0) {
        const row = `<tr><td colspan="5">No classes scheduled.</td></tr>`;
        tbody.innerHTML += row;
        return;
    }

    schedule.forEach(record => {
        const row = `<tr>
            <td>${record.day}</td>
            <td>${record.time}</td>
            <td>${record.subject}</td>
            <td>${record.teacher}</td>
            <td><button onclick="deleteScheduleRecord('${record.day}', '${record.time}')">Delete</button></td>
        </tr>`;
        tbody.innerHTML += row;
    });
}

// Delete schedule record
function deleteScheduleRecord(day, time) {
    let schedule = JSON.parse(localStorage.getItem('classSchedule')) || [];
    
    // Filter out the record to delete
    schedule = schedule.filter(record => !(record.day === day && record.time === time));
    
    // Save the updated records back to local storage
    localStorage.setItem('classSchedule', JSON.stringify(schedule));
    
    populateTeacherSchedule();
}

// Load schedule on page load
document.addEventListener('DOMContentLoaded', populateTeacherSchedule);

    </script>
</body>
</html>
